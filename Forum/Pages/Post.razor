@page "/article/{id:int}"

@inject SignInManager<ForumUser> SignInManager
@inject UserManager<ForumUser> UserManager

<div class="container">
    <div class="row">
        <img class="post-card-img" src="./img/articleMainImages/@post.Image"/>
        <div class="text">
            <div class="info">
                <time>12:51 07.06.2023r.</time>
            </div>

            <h1>@post.Title</h1>
            <hr/>
            <h3>@post.Introduction</h3>
            <hr/>
            <p>@((MarkupString)post.BodyText)</p>

            <div class="info">
                <div>
                    <h6>Filip Statkiewicz</h6>
                </div>
            </div>
        </div>
        <div class="AddCommentContainer">
            <h3>Dodaj komentarz</h3>
                
            @if (SignInManager.IsSignedIn(currentUser))
            {
                <EditForm Model="@commentModel" OnValidSubmit="@AddComment">
                    <InputTextArea class="inputTextArea" @bind-Value="@commentModel.CommentText" />
                    <button type="submit" class="btn btn-primary">Dodaj komentarz</button>
                </EditForm>
            }
            else
            {
                <p>You have to be logged in before you can comment.</p>
            }
                
        </div>

        @foreach (var comment in post.Comments)
            {
                <div class="comment">
                    <h5>@Regex.Replace(@comment.ForumUser.UserName, RegExpPattern, "")</h5>
                    <time>@comment.Created</time>
                    <p>@comment.CommentText</p>
                </div>
            }
        </div>
</div>

@using Forum.Data;
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.Text.RegularExpressions
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@inject AuthenticationStateProvider authenticationStateProvider
@code {
    [Parameter]
    public int id { get; set; }
    public Forum.Data.Post post;
    public Comment commentModel = new Comment();
    public ClaimsPrincipal currentUser  { get; set; }
    public string UserId { get; set; }

    string RegExpPattern = @"@.*$";

    protected override async Task OnInitializedAsync()
    {
        getPost();

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User;

        @if (SignInManager.IsSignedIn(currentUser))
        {
            UserId = currentUser.FindFirstValue(ClaimTypes.NameIdentifier);
        }
    }

    public async Task getPost()
    {
        post = _context.Posts
            .Where(x => x.Id == id)
            .Include(c => c.Comments)
            .ThenInclude(f => f.ForumUser)
            .FirstOrDefault();
    }

    public async Task AddComment()
    {
        commentModel.ForumUserId = UserId;
        commentModel.PostId = id;
        commentModel.Created = DateTime.Now;

        _context.Comments.Add(commentModel);
        await _context.SaveChangesAsync();

        commentModel = new Comment();

        getPost();
        StateHasChanged();
    }
}